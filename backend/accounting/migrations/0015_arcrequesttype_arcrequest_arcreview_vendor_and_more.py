# Generated by Django 5.1 on 2025-10-30 01:42

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounting', '0014_add_board_packet_models'),
        ('tenants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ARCRequestType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(help_text="Short code (e.g., 'PAINT', 'FENCE')", max_length=20)),
                ('name', models.CharField(help_text='Request type name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description and guidelines')),
                ('requires_plans', models.BooleanField(default=False, help_text='Requires architectural plans?')),
                ('requires_contractor', models.BooleanField(default=False, help_text='Requires contractor information?')),
                ('typical_review_days', models.IntegerField(default=30, help_text='Typical review time in days')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arc_request_types', to='tenants.tenant')),
            ],
            options={
                'db_table': 'arc_request_types',
                'ordering': ['name'],
                'unique_together': {('tenant', 'code')},
            },
        ),
        migrations.CreateModel(
            name='ARCRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('DENIED', 'Denied'), ('APPROVED_WITH_CONDITIONS', 'Approved with Conditions'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=30)),
                ('title', models.CharField(help_text='Brief title', max_length=255)),
                ('description', models.TextField(help_text='Detailed proposal')),
                ('requested_start_date', models.DateField(blank=True, null=True)),
                ('estimated_completion_date', models.DateField(blank=True, null=True)),
                ('contractor_name', models.CharField(blank=True, max_length=100)),
                ('contractor_license', models.CharField(blank=True, max_length=50)),
                ('contractor_phone', models.CharField(blank=True, max_length=20)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='arc_requests_created', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='arc_requests', to='accounting.owner')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arc_requests', to='tenants.tenant')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='arc_requests', to='accounting.unit')),
                ('request_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='requests', to='accounting.arcrequesttype')),
            ],
            options={
                'db_table': 'arc_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ARCReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('decision', models.CharField(choices=[('APPROVE', 'Approve'), ('DENY', 'Deny'), ('REQUEST_CHANGES', 'Request Changes'), ('ABSTAIN', 'Abstain')], max_length=20)),
                ('comments', models.TextField(blank=True, help_text='Review comments')),
                ('conditions', models.TextField(blank=True, help_text='Conditions for approval')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='accounting.arcrequest')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='arc_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'arc_reviews',
                'ordering': ['request', 'review_date'],
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Company name', max_length=200)),
                ('contact_name', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField(blank=True)),
                ('tax_id', models.CharField(blank=True, help_text='EIN for 1099 reporting', max_length=50)),
                ('license_number', models.CharField(blank=True, max_length=50)),
                ('insurance_expiration', models.DateField(blank=True, null=True)),
                ('payment_terms', models.CharField(default='Net 30', help_text='Payment terms', max_length=50)),
                ('specialty', models.CharField(blank=True, help_text='Vendor specialty/category', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendors', to='tenants.tenant')),
            ],
            options={
                'db_table': 'vendors',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ViolationEscalation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('step_number', models.IntegerField(help_text='Escalation step number')),
                ('step_name', models.CharField(help_text='Step name', max_length=50)),
                ('escalated_at', models.DateTimeField(auto_now_add=True, help_text='When this step was triggered')),
                ('fine_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fine amount for this step', max_digits=15, null=True)),
                ('notice_sent', models.BooleanField(default=False, help_text='Was notice sent?')),
                ('notice_sent_at', models.DateTimeField(blank=True, help_text='When notice was sent', null=True)),
                ('notice_method', models.CharField(blank=True, help_text='Email, Certified Mail, Hand Delivered', max_length=50)),
                ('tracking_number', models.CharField(blank=True, help_text='USPS tracking number for certified mail', max_length=100)),
                ('notes', models.TextField(blank=True, help_text='Notes about this escalation')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='violation_escalations_created', to=settings.AUTH_USER_MODEL)),
                ('violation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='escalations', to='accounting.violation')),
            ],
            options={
                'db_table': 'violation_escalations',
                'ordering': ['violation', 'step_number'],
            },
        ),
        migrations.CreateModel(
            name='ViolationFine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Fine amount', max_digits=15)),
                ('posted_date', models.DateField(blank=True, help_text='Date fine was posted to ledger', null=True)),
                ('paid_date', models.DateField(blank=True, help_text='Date fine was paid', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('POSTED', 'Posted'), ('PAID', 'Paid'), ('WAIVED', 'Waived')], default='PENDING', max_length=20)),
                ('waived_reason', models.TextField(blank=True, help_text='Reason fine was waived')),
                ('waived_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('escalation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fines', to='accounting.violationescalation')),
                ('invoice', models.ForeignKey(blank=True, help_text='Link to invoice (AR)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='violation_fines', to='accounting.invoice')),
                ('journal_entry', models.ForeignKey(blank=True, help_text='Link to GL entry', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='violation_fines', to='accounting.journalentry')),
                ('violation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fines', to='accounting.violation')),
                ('waived_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='violation_fines_waived', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'violation_fines',
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='ViolationType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(help_text="Short code (e.g., 'LAND-001', 'PARK-002')", max_length=20)),
                ('name', models.CharField(help_text="Violation name (e.g., 'Overgrown Lawn')", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Detailed description of violation')),
                ('category', models.CharField(help_text='Category (Landscaping, Parking, Noise, Structural, etc.)', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Is this violation type active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='violation_types', to='tenants.tenant')),
            ],
            options={
                'db_table': 'violation_types',
                'ordering': ['category', 'code'],
            },
        ),
        migrations.CreateModel(
            name='FineSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('step_number', models.IntegerField(help_text='Step in escalation (1=courtesy, 2=warning, 3=fine, etc.)')),
                ('step_name', models.CharField(help_text='Step name (Courtesy, Warning, Fine, Continued, Legal)', max_length=50)),
                ('days_after_previous', models.IntegerField(default=7, help_text='Days after previous step')),
                ('fine_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Fine amount for this step', max_digits=15)),
                ('description', models.TextField(blank=True, help_text='Description of this step')),
                ('requires_board_approval', models.BooleanField(default=False, help_text='Does this step require board approval?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('violation_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fine_schedule_steps', to='accounting.violationtype')),
            ],
            options={
                'db_table': 'fine_schedules',
                'ordering': ['violation_type', 'step_number'],
            },
        ),
        migrations.CreateModel(
            name='WorkOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('work_order_number', models.CharField(help_text='Auto-generated number (e.g., WO-2025-001)', max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('EMERGENCY', 'Emergency'), ('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low')], default='MEDIUM', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('OPEN', 'Open'), ('ASSIGNED', 'Assigned'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CLOSED', 'Closed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('location', models.CharField(help_text='Unit number or common area', max_length=255)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('requested_date', models.DateField()),
                ('scheduled_date', models.DateField(blank=True, null=True)),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='work_orders_assigned', to=settings.AUTH_USER_MODEL)),
                ('assigned_to_vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='work_orders', to='accounting.vendor')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='work_orders_created', to=settings.AUTH_USER_MODEL)),
                ('fund', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='work_orders', to='accounting.fund')),
                ('gl_account', models.ForeignKey(blank=True, help_text='GL expense account', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='work_orders', to='accounting.account')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='work_orders_requested', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_orders', to='tenants.tenant')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='work_orders', to='accounting.unit')),
            ],
            options={
                'db_table': 'work_orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkOrderAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_url', models.URLField(max_length=500)),
                ('file_name', models.CharField(max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='work_order_attachments_uploaded', to=settings.AUTH_USER_MODEL)),
                ('work_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='accounting.workorder')),
            ],
            options={
                'db_table': 'work_order_attachments',
                'ordering': ['work_order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkOrderCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(help_text="Short code (e.g., 'LAND', 'POOL')", max_length=20)),
                ('name', models.CharField(help_text='Category name', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_gl_account', models.ForeignKey(blank=True, help_text='Default GL expense account', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='work_order_categories', to='accounting.account')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_order_categories', to='tenants.tenant')),
            ],
            options={
                'db_table': 'work_order_categories',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='workorder',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='work_orders', to='accounting.workordercategory'),
        ),
        migrations.CreateModel(
            name='WorkOrderComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('commented_at', models.DateTimeField(auto_now_add=True)),
                ('is_internal', models.BooleanField(default=False, help_text='Visible to staff only?')),
                ('commented_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='work_order_comments', to=settings.AUTH_USER_MODEL)),
                ('work_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='accounting.workorder')),
            ],
            options={
                'db_table': 'work_order_comments',
                'ordering': ['work_order', 'commented_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkOrderInvoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(max_length=100)),
                ('invoice_date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('PAID', 'Paid')], default='PENDING', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='work_order_invoices_approved', to=settings.AUTH_USER_MODEL)),
                ('journal_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='work_order_invoices', to='accounting.journalentry')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='accounting.vendor')),
                ('work_order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='accounting.workorder')),
            ],
            options={
                'db_table': 'work_order_invoices',
                'ordering': ['-invoice_date'],
            },
        ),
        migrations.CreateModel(
            name='ARCDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('PLAN', 'Plan'), ('SPEC', 'Specification'), ('PHOTO', 'Photo'), ('CONTRACT', 'Contract'), ('OTHER', 'Other')], max_length=20)),
                ('file_url', models.URLField(help_text='S3 path or local storage path', max_length=500)),
                ('file_name', models.CharField(max_length=255)),
                ('file_size', models.IntegerField(help_text='File size in bytes')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='arc_documents_uploaded', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='accounting.arcrequest')),
            ],
            options={
                'db_table': 'arc_documents',
                'ordering': ['request', 'uploaded_at'],
                'indexes': [models.Index(fields=['request'], name='arc_documen_request_09a3b7_idx')],
            },
        ),
        migrations.CreateModel(
            name='ARCCompletion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('inspection_date', models.DateField()),
                ('complies_with_approval', models.BooleanField(help_text='Does work comply with approval?')),
                ('inspector_notes', models.TextField(blank=True)),
                ('photo_url', models.URLField(blank=True, help_text='Completion photo', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inspected_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='arc_completions_inspected', to=settings.AUTH_USER_MODEL)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='completion', to='accounting.arcrequest')),
            ],
            options={
                'db_table': 'arc_completions',
                'indexes': [models.Index(fields=['request'], name='arc_complet_request_5a0ed5_idx'), models.Index(fields=['inspection_date'], name='arc_complet_inspect_bca561_idx')],
            },
        ),
        migrations.CreateModel(
            name='ARCApproval',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('final_decision', models.CharField(choices=[('APPROVED', 'Approved'), ('DENIED', 'Denied'), ('APPROVED_WITH_CONDITIONS', 'Approved with Conditions')], max_length=30)),
                ('decision_date', models.DateField()),
                ('conditions', models.TextField(blank=True, help_text='Approval conditions')),
                ('expiration_date', models.DateField(blank=True, help_text='Approval expires if not started', null=True)),
                ('board_resolution', models.CharField(blank=True, help_text='Board resolution number', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='arc_approvals', to=settings.AUTH_USER_MODEL)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='approval', to='accounting.arcrequest')),
            ],
            options={
                'db_table': 'arc_approvals',
                'indexes': [models.Index(fields=['request'], name='arc_approva_request_8a2ee3_idx'), models.Index(fields=['decision_date'], name='arc_approva_decisio_967e73_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='arcrequest',
            index=models.Index(fields=['tenant', 'status'], name='arc_request_tenant__77f568_idx'),
        ),
        migrations.AddIndex(
            model_name='arcrequest',
            index=models.Index(fields=['unit'], name='arc_request_unit_id_7f6d2c_idx'),
        ),
        migrations.AddIndex(
            model_name='arcrequest',
            index=models.Index(fields=['owner'], name='arc_request_owner_i_939b9e_idx'),
        ),
        migrations.AddIndex(
            model_name='arcrequest',
            index=models.Index(fields=['submitted_at'], name='arc_request_submitt_714111_idx'),
        ),
        migrations.AddIndex(
            model_name='arcreview',
            index=models.Index(fields=['request'], name='arc_reviews_request_403589_idx'),
        ),
        migrations.AddIndex(
            model_name='arcreview',
            index=models.Index(fields=['reviewer'], name='arc_reviews_reviewe_b31cea_idx'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(fields=['tenant', 'is_active'], name='vendors_tenant__347159_idx'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(fields=['specialty'], name='vendors_special_333251_idx'),
        ),
        migrations.AddIndex(
            model_name='violationescalation',
            index=models.Index(fields=['violation', 'step_number'], name='violation_e_violati_f91bcd_idx'),
        ),
        migrations.AddIndex(
            model_name='violationescalation',
            index=models.Index(fields=['escalated_at'], name='violation_e_escalat_baa757_idx'),
        ),
        migrations.AddIndex(
            model_name='violationfine',
            index=models.Index(fields=['violation', 'status'], name='violation_f_violati_0e1777_idx'),
        ),
        migrations.AddIndex(
            model_name='violationfine',
            index=models.Index(fields=['posted_date'], name='violation_f_posted__2279e8_idx'),
        ),
        migrations.AddIndex(
            model_name='violationtype',
            index=models.Index(fields=['tenant', 'is_active'], name='violation_t_tenant__ccb364_idx'),
        ),
        migrations.AddIndex(
            model_name='violationtype',
            index=models.Index(fields=['category'], name='violation_t_categor_a135cb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='violationtype',
            unique_together={('tenant', 'code')},
        ),
        migrations.AlterUniqueTogether(
            name='fineschedule',
            unique_together={('violation_type', 'step_number')},
        ),
        migrations.AddIndex(
            model_name='workorderattachment',
            index=models.Index(fields=['work_order'], name='work_order__work_or_fd0b97_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workordercategory',
            unique_together={('tenant', 'code')},
        ),
        migrations.AddIndex(
            model_name='workorder',
            index=models.Index(fields=['tenant', 'status'], name='work_orders_tenant__31e580_idx'),
        ),
        migrations.AddIndex(
            model_name='workorder',
            index=models.Index(fields=['category'], name='work_orders_categor_6dcb88_idx'),
        ),
        migrations.AddIndex(
            model_name='workorder',
            index=models.Index(fields=['assigned_to_vendor'], name='work_orders_assigne_f0326f_idx'),
        ),
        migrations.AddIndex(
            model_name='workorder',
            index=models.Index(fields=['requested_date'], name='work_orders_request_3e9b3c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workorder',
            unique_together={('tenant', 'work_order_number')},
        ),
        migrations.AddIndex(
            model_name='workordercomment',
            index=models.Index(fields=['work_order', 'commented_at'], name='work_order__work_or_28f104_idx'),
        ),
        migrations.AddIndex(
            model_name='workorderinvoice',
            index=models.Index(fields=['work_order'], name='work_order__work_or_58237d_idx'),
        ),
        migrations.AddIndex(
            model_name='workorderinvoice',
            index=models.Index(fields=['vendor'], name='work_order__vendor__18d33e_idx'),
        ),
        migrations.AddIndex(
            model_name='workorderinvoice',
            index=models.Index(fields=['payment_status'], name='work_order__payment_9dea21_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workorderinvoice',
            unique_together={('vendor', 'invoice_number')},
        ),
    ]
