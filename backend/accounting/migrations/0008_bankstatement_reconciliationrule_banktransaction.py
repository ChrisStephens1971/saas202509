# Generated by Django 5.1 on 2025-10-28 15:15

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounting', '0007_budget_budgetline_budget_budgets_tenant__8e07e3_idx_and_more'),
        ('tenants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BankStatement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('statement_date', models.DateField(help_text='Statement period ending date')),
                ('beginning_balance', models.DecimalField(decimal_places=2, help_text='Beginning balance from bank statement', max_digits=15)),
                ('ending_balance', models.DecimalField(decimal_places=2, help_text='Ending balance from bank statement', max_digits=15)),
                ('file_name', models.CharField(help_text='Original filename of uploaded statement', max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('reconciled', models.BooleanField(default=False, help_text='True if reconciliation is complete')),
                ('reconciled_at', models.DateTimeField(blank=True, help_text='When reconciliation was completed', null=True)),
                ('notes', models.TextField(blank=True, default='', help_text='Reconciliation notes')),
                ('fund', models.ForeignKey(help_text='Fund this bank statement belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='bank_statements', to='accounting.fund')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_statements', to='tenants.tenant')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_statements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bank_statements',
                'ordering': ['-statement_date'],
                'unique_together': {('fund', 'statement_date')},
            },
        ),
        migrations.CreateModel(
            name='ReconciliationRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Descriptive name for this rule', max_length=255)),
                ('description_pattern', models.CharField(help_text='Pattern to match in transaction description (case-insensitive)', max_length=255)),
                ('amount_min', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum amount to match (optional)', max_digits=15, null=True)),
                ('amount_max', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum amount to match (optional)', max_digits=15, null=True)),
                ('active', models.BooleanField(default=True, help_text='Whether this rule is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(help_text='Account to use when creating entries from matched transactions', on_delete=django.db.models.deletion.CASCADE, to='accounting.account')),
                ('fund', models.ForeignKey(help_text='Fund to use when creating entries', on_delete=django.db.models.deletion.CASCADE, to='accounting.fund')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reconciliation_rules', to='tenants.tenant')),
            ],
            options={
                'db_table': 'reconciliation_rules',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BankTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_date', models.DateField(help_text='Date transaction occurred')),
                ('post_date', models.DateField(blank=True, help_text='Date transaction posted to account', null=True)),
                ('description', models.TextField(help_text='Transaction description from bank')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount (positive=deposit, negative=withdrawal)', max_digits=15)),
                ('check_number', models.CharField(blank=True, default='', help_text='Check number if applicable', max_length=50)),
                ('reference_number', models.CharField(blank=True, default='', help_text='Bank reference or confirmation number', max_length=100)),
                ('status', models.CharField(choices=[('unmatched', 'Unmatched'), ('matched', 'Matched to Entry'), ('ignored', 'Ignored'), ('created', 'Entry Created')], db_index=True, default='unmatched', max_length=20)),
                ('match_confidence', models.IntegerField(default=0, help_text='Match confidence score (0-100)', validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, default='', help_text='Reconciliation notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('matched_entry', models.ForeignKey(blank=True, help_text='Journal entry this transaction is matched to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matched_bank_transactions', to='accounting.journalentry')),
                ('statement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='accounting.bankstatement')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_transactions', to='tenants.tenant')),
            ],
            options={
                'db_table': 'bank_transactions',
                'ordering': ['transaction_date', '-amount'],
                'indexes': [models.Index(fields=['status', 'transaction_date'], name='bank_transa_status_a92de8_idx'), models.Index(fields=['statement', 'status'], name='bank_transa_stateme_d39400_idx')],
            },
        ),
    ]
