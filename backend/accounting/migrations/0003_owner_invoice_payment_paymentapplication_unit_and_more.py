# Generated by Django 5.1 on 2025-10-28 01:11

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounting', '0002_seed_account_types'),
        ('tenants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(help_text='Owner first name', max_length=100)),
                ('last_name', models.CharField(help_text='Owner last name', max_length=100)),
                ('email', models.EmailField(blank=True, help_text='Owner email address', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='Owner phone number', max_length=20)),
                ('mailing_address', models.TextField(blank=True, help_text='Mailing address for statements')),
                ('is_board_member', models.BooleanField(default=False, help_text='Is this owner a board member?')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('delinquent', 'Delinquent')], default='active', help_text='Owner status', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this owner')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(help_text='The HOA (tenant) this owner belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='owners', to='tenants.tenant')),
            ],
            options={
                'db_table': 'owners',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(help_text='Invoice number (auto-generated: INV-00001)', max_length=20)),
                ('invoice_date', models.DateField(help_text='Invoice date')),
                ('due_date', models.DateField(help_text='Payment due date')),
                ('invoice_type', models.CharField(choices=[('ASSESSMENT', 'Monthly/Quarterly Assessment'), ('LATE_FEE', 'Late Fee'), ('SPECIAL', 'Special Assessment'), ('OTHER', 'Other Charge')], default='ASSESSMENT', help_text='Type of invoice', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ISSUED', 'Issued'), ('PAID', 'Paid'), ('OVERDUE', 'Overdue'), ('CANCELLED', 'Cancelled')], default='DRAFT', help_text='Invoice status', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Subtotal before late fees', max_digits=15)),
                ('late_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Late fee amount', max_digits=15)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount (subtotal + late fee)', max_digits=15)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount paid so far', max_digits=15)),
                ('amount_due', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount still owed (total - paid)', max_digits=15)),
                ('description', models.TextField(blank=True, help_text='Invoice description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('journal_entry', models.ForeignKey(blank=True, help_text='Journal entry created for this invoice', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='accounting.journalentry')),
                ('tenant', models.ForeignKey(help_text='The HOA (tenant)', on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='tenants.tenant')),
                ('owner', models.ForeignKey(help_text='The owner being invoiced', on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='accounting.owner')),
            ],
            options={
                'db_table': 'invoices',
                'ordering': ['-invoice_date', '-invoice_number'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this payment', primary_key=True, serialize=False)),
                ('payment_number', models.CharField(blank=True, help_text='Auto-generated payment number (PMT-00001, PMT-00002, etc.)', max_length=20)),
                ('payment_date', models.DateField(help_text='Date the payment was received (accounting date)')),
                ('payment_method', models.CharField(choices=[('CHECK', 'Check'), ('ACH', 'ACH/Bank Transfer'), ('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('CASH', 'Cash'), ('WIRE', 'Wire Transfer'), ('OTHER', 'Other')], default='CHECK', help_text='Method of payment', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total payment amount received', max_digits=15)),
                ('amount_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount applied to invoices', max_digits=15)),
                ('amount_unapplied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount not yet applied (credit on account)', max_digits=15)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CLEARED', 'Cleared'), ('BOUNCED', 'Bounced'), ('REFUNDED', 'Refunded'), ('CANCELLED', 'Cancelled')], default='CLEARED', help_text='Payment status', max_length=20)),
                ('reference_number', models.CharField(blank=True, help_text='Check number, transaction ID, confirmation number, etc.', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this payment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('journal_entry', models.ForeignKey(blank=True, help_text='Auto-created journal entry (DR: Cash, CR: AR)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='accounting.journalentry')),
                ('owner', models.ForeignKey(help_text='Owner who made this payment', on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='accounting.owner')),
                ('tenant', models.ForeignKey(help_text='Tenant (HOA) this payment belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'db_table': 'payments',
                'ordering': ['-payment_date', '-payment_number'],
            },
        ),
        migrations.CreateModel(
            name='PaymentApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this payment application', primary_key=True, serialize=False)),
                ('amount_applied', models.DecimalField(decimal_places=2, help_text='Amount of payment applied to this invoice', max_digits=15)),
                ('applied_at', models.DateTimeField(auto_now_add=True, help_text='When this application was created')),
                ('notes', models.TextField(blank=True, help_text='Notes about this application')),
                ('invoice', models.ForeignKey(help_text='Invoice receiving the payment', on_delete=django.db.models.deletion.PROTECT, related_name='payment_applications', to='accounting.invoice')),
                ('payment', models.ForeignKey(help_text='Payment being applied', on_delete=django.db.models.deletion.PROTECT, related_name='applications', to='accounting.payment')),
            ],
            options={
                'verbose_name': 'Payment Application',
                'verbose_name_plural': 'Payment Applications',
                'db_table': 'payment_applications',
                'ordering': ['payment', 'applied_at'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('unit_number', models.CharField(help_text="Unit number (e.g., '123', 'A-5', 'Lot 42')", max_length=20)),
                ('property_address', models.TextField(blank=True, help_text='Physical address of the unit')),
                ('bedrooms', models.PositiveIntegerField(blank=True, help_text='Number of bedrooms', null=True)),
                ('bathrooms', models.DecimalField(blank=True, decimal_places=1, help_text='Number of bathrooms (e.g., 2.5)', max_digits=3, null=True)),
                ('square_feet', models.PositiveIntegerField(blank=True, help_text='Square footage', null=True)),
                ('monthly_assessment', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Monthly assessment amount', max_digits=15)),
                ('status', models.CharField(choices=[('occupied', 'Occupied by Owner'), ('vacant', 'Vacant'), ('rented', 'Rented/Leased')], default='occupied', help_text='Unit status', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this unit')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(help_text='The HOA (tenant) this unit belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='units', to='tenants.tenant')),
            ],
            options={
                'db_table': 'units',
                'ordering': ['unit_number'],
            },
        ),
        migrations.CreateModel(
            name='Ownership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ownership_percentage', models.DecimalField(decimal_places=2, default=Decimal('100.00'), help_text='Ownership percentage (usually 100%, but can be split)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('start_date', models.DateField(help_text='Ownership start date')),
                ('end_date', models.DateField(blank=True, help_text='Ownership end date (NULL = current owner)', null=True)),
                ('is_current', models.BooleanField(default=True, help_text='Is this the current ownership?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(help_text='The owner', on_delete=django.db.models.deletion.PROTECT, related_name='ownerships', to='accounting.owner')),
                ('tenant', models.ForeignKey(help_text='The HOA (tenant)', on_delete=django.db.models.deletion.PROTECT, related_name='ownerships', to='tenants.tenant')),
                ('unit', models.ForeignKey(help_text='The unit', on_delete=django.db.models.deletion.PROTECT, related_name='ownerships', to='accounting.unit')),
            ],
            options={
                'db_table': 'ownerships',
                'ordering': ['-start_date'],
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='unit',
            field=models.ForeignKey(help_text='The unit this invoice is for', on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='accounting.unit'),
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this invoice line', primary_key=True, serialize=False)),
                ('line_number', models.PositiveIntegerField(help_text='Line number within the invoice (1, 2, 3...)')),
                ('description', models.TextField(help_text="Description of the charge (e.g., 'October 2025 Monthly Assessment')")),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount for this line item', max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(help_text='Revenue account to credit when invoice is posted', on_delete=django.db.models.deletion.PROTECT, related_name='invoice_lines', to='accounting.account')),
                ('invoice', models.ForeignKey(help_text='Invoice this line belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='lines', to='accounting.invoice')),
            ],
            options={
                'verbose_name': 'Invoice Line',
                'verbose_name_plural': 'Invoice Lines',
                'db_table': 'invoice_lines',
                'ordering': ['invoice', 'line_number'],
                'indexes': [models.Index(fields=['invoice', 'line_number'], name='invoice_lin_invoice_28ab92_idx'), models.Index(fields=['account'], name='invoice_lin_account_a24da8_idx')],
                'unique_together': {('invoice', 'line_number')},
            },
        ),
        migrations.AddIndex(
            model_name='owner',
            index=models.Index(fields=['tenant', 'status'], name='owners_tenant__655917_idx'),
        ),
        migrations.AddIndex(
            model_name='owner',
            index=models.Index(fields=['email'], name='owners_email_84315f_idx'),
        ),
        migrations.AddIndex(
            model_name='owner',
            index=models.Index(fields=['last_name', 'first_name'], name='owners_last_na_24e9a8_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['tenant', 'payment_number'], name='payments_tenant__8ef862_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['owner', 'payment_date'], name='payments_owner_i_8643af_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_date'], name='payments_payment_aebcb7_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='payments_status_d621e5_idx'),
        ),
        migrations.AddConstraint(
            model_name='payment',
            constraint=models.CheckConstraint(condition=models.Q(('amount__gte', 0)), name='payment_amount_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='payment',
            constraint=models.CheckConstraint(condition=models.Q(('amount_applied__gte', 0)), name='payment_amount_applied_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='payment',
            constraint=models.CheckConstraint(condition=models.Q(('amount_unapplied__gte', 0)), name='payment_amount_unapplied_non_negative'),
        ),
        migrations.AddIndex(
            model_name='paymentapplication',
            index=models.Index(fields=['payment', 'applied_at'], name='payment_app_payment_6b8c3f_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentapplication',
            index=models.Index(fields=['invoice', 'applied_at'], name='payment_app_invoice_5debf9_idx'),
        ),
        migrations.AddConstraint(
            model_name='paymentapplication',
            constraint=models.CheckConstraint(condition=models.Q(('amount_applied__gt', 0)), name='payment_application_amount_positive'),
        ),
        migrations.AddIndex(
            model_name='unit',
            index=models.Index(fields=['tenant', 'unit_number'], name='units_tenant__44bca3_idx'),
        ),
        migrations.AddIndex(
            model_name='unit',
            index=models.Index(fields=['tenant', 'status'], name='units_tenant__b0df1a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unit',
            unique_together={('tenant', 'unit_number')},
        ),
        migrations.AddIndex(
            model_name='ownership',
            index=models.Index(fields=['tenant', 'owner'], name='ownerships_tenant__e4086e_idx'),
        ),
        migrations.AddIndex(
            model_name='ownership',
            index=models.Index(fields=['tenant', 'unit'], name='ownerships_tenant__1b0f7c_idx'),
        ),
        migrations.AddIndex(
            model_name='ownership',
            index=models.Index(fields=['is_current'], name='ownerships_is_curr_61a401_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['tenant', 'invoice_number'], name='invoices_tenant__7169b0_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['tenant', 'owner'], name='invoices_tenant__c7a9e1_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['tenant', 'unit'], name='invoices_tenant__b28881_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['status'], name='invoices_status_07776b_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['due_date'], name='invoices_due_dat_039a25_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='invoice',
            unique_together={('tenant', 'invoice_number')},
        ),
    ]
