# Generated by Django 5.1 on 2025-10-29 02:59

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounting', '0008_bankstatement_reconciliationrule_banktransaction'),
        ('tenants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReserveStudy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Study name (e.g., '2025 Reserve Study')", max_length=255)),
                ('study_date', models.DateField(default=datetime.date.today, help_text='Date the study was prepared')),
                ('horizon_years', models.IntegerField(default=20, help_text='Planning horizon in years (typically 5-30)', validators=[django.core.validators.MinValueValidator(5)])),
                ('inflation_rate', models.DecimalField(decimal_places=2, default=Decimal('3.50'), help_text='Annual inflation rate as percentage (e.g., 3.50 for 3.5%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('interest_rate', models.DecimalField(decimal_places=2, default=Decimal('1.50'), help_text='Expected interest rate on reserve funds (e.g., 1.50 for 1.5%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, help_text='Study notes or methodology')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reserve_studies', to='tenants.tenant')),
            ],
            options={
                'db_table': 'reserve_studies',
                'ordering': ['-study_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ReserveScenario',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Scenario name (e.g., 'Baseline', 'Aggressive Funding')", max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of this scenario')),
                ('monthly_contribution', models.DecimalField(decimal_places=2, help_text='Monthly contribution to reserve fund', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('one_time_contribution', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='One-time special assessment (optional)', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('contribution_increase_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Annual % increase in contributions (e.g., 2.0 for 2%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_baseline', models.BooleanField(default=False, help_text='Whether this is the recommended baseline scenario')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scenarios', to='accounting.reservestudy')),
            ],
            options={
                'db_table': 'reserve_scenarios',
                'ordering': ['-is_baseline', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ReserveComponent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Component name (e.g., 'Asphalt Parking Lot - Section A')", max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description and location')),
                ('category', models.CharField(choices=[('ROOFING', 'Roofing'), ('PAVING', 'Paving / Asphalt'), ('PAINTING', 'Painting / Coatings'), ('STRUCTURAL', 'Structural / Building'), ('HVAC', 'HVAC'), ('PLUMBING', 'Plumbing'), ('ELECTRICAL', 'Electrical'), ('POOL', 'Pool / Spa'), ('LANDSCAPE', 'Landscaping'), ('OTHER', 'Other')], default='OTHER', max_length=30)),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Quantity (e.g., square footage, linear feet, unit count)', max_digits=15)),
                ('unit', models.CharField(help_text="Unit of measurement (e.g., 'sq ft', 'linear ft', 'units')", max_length=50)),
                ('useful_life_years', models.IntegerField(help_text='Total useful life in years (e.g., roof = 20 years)', validators=[django.core.validators.MinValueValidator(1)])),
                ('remaining_life_years', models.IntegerField(help_text='Remaining life from study date (e.g., 8 years left)', validators=[django.core.validators.MinValueValidator(0)])),
                ('current_cost', models.DecimalField(decimal_places=2, help_text="Replacement cost in today's dollars", max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='accounting.reservestudy')),
            ],
            options={
                'db_table': 'reserve_components',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.AddIndex(
            model_name='reservestudy',
            index=models.Index(fields=['tenant', '-study_date'], name='reserve_stu_tenant__27f5c4_idx'),
        ),
        migrations.AddIndex(
            model_name='reservescenario',
            index=models.Index(fields=['study', '-is_baseline'], name='reserve_sce_study_i_e303d0_idx'),
        ),
        migrations.AddIndex(
            model_name='reservecomponent',
            index=models.Index(fields=['study', 'category'], name='reserve_com_study_i_e10767_idx'),
        ),
    ]
