# Generated by Django 5.1 on 2025-10-28 00:27

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tenants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('code', models.CharField(choices=[('ASSET', 'Asset'), ('LIABILITY', 'Liability'), ('EQUITY', 'Equity'), ('REVENUE', 'Revenue'), ('EXPENSE', 'Expense')], help_text='Account type code', max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Account type name', max_length=100)),
                ('normal_balance', models.CharField(choices=[('DEBIT', 'Debit'), ('CREDIT', 'Credit')], help_text='Normal balance (Debit or Credit)', max_length=10)),
                ('description', models.TextField(blank=True, help_text='Description of this account type')),
            ],
            options={
                'db_table': 'account_types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Fund',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Fund name (e.g., 'Operating Fund', 'Reserve Fund')", max_length=100)),
                ('fund_type', models.CharField(choices=[('OPERATING', 'Operating Fund'), ('RESERVE', 'Reserve Fund'), ('SPECIAL_ASSESSMENT', 'Special Assessment Fund')], help_text='Type of fund', max_length=30)),
                ('description', models.TextField(blank=True, help_text='Description of fund purpose')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this fund is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tenant', models.ForeignKey(help_text='The HOA (tenant) this fund belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='funds', to='tenants.tenant')),
            ],
            options={
                'db_table': 'funds',
                'ordering': ['fund_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('account_number', models.CharField(help_text="Account number (e.g., '1100', '5200')", max_length=20)),
                ('name', models.CharField(help_text="Account name (e.g., 'Operating Cash', 'Landscaping Expense')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of this account')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this account is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent_account', models.ForeignKey(blank=True, help_text='Parent account for hierarchical accounts', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sub_accounts', to='accounting.account')),
                ('tenant', models.ForeignKey(help_text='The HOA (tenant) this account belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='tenants.tenant')),
                ('account_type', models.ForeignKey(help_text='Type of account (Asset, Liability, etc.)', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='accounting.accounttype')),
                ('fund', models.ForeignKey(help_text='The fund this account belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='accounting.fund')),
            ],
            options={
                'db_table': 'accounts',
                'ordering': ['account_number'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entry_number', models.BigIntegerField(help_text='Sequential entry number (auto-generated per tenant)')),
                ('entry_date', models.DateField(help_text='Accounting date (DATE not TIMESTAMPTZ - critical for accounting)')),
                ('description', models.TextField(help_text='Description of this journal entry')),
                ('entry_type', models.CharField(choices=[('MANUAL', 'Manual Entry'), ('INVOICE', 'Invoice'), ('PAYMENT', 'Payment'), ('ADJUSTMENT', 'Adjustment'), ('REVERSAL', 'Reversal'), ('TRANSFER', 'Inter-fund Transfer')], default='MANUAL', help_text='Type of journal entry', max_length=20)),
                ('reference_id', models.UUIDField(blank=True, help_text='Reference to source document (invoice, payment, etc.)', null=True)),
                ('posted_at', models.DateTimeField(auto_now_add=True, help_text='When this entry was posted (UTC timestamp)')),
                ('posted_by', models.UUIDField(blank=True, help_text='User ID who posted this entry', null=True)),
                ('previous_entry_hash', models.CharField(blank=True, help_text='Hash of previous entry (cryptographic chain)', max_length=64)),
                ('entry_hash', models.CharField(blank=True, help_text='Hash of this entry for tamper detection', max_length=64)),
                ('reversed_by', models.ForeignKey(blank=True, help_text='Reversal entry (if this entry was reversed)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reverses', to='accounting.journalentry')),
                ('tenant', models.ForeignKey(help_text='The HOA (tenant) this entry belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='journal_entries', to='tenants.tenant')),
            ],
            options={
                'db_table': 'journal_entries',
                'ordering': ['-entry_date', '-entry_number'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntryLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('line_number', models.PositiveIntegerField(help_text='Line number within this journal entry')),
                ('debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Debit amount (must be 0 if credit is used)', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Credit amount (must be 0 if debit is used)', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('description', models.TextField(blank=True, help_text='Line-specific description (optional)')),
                ('account', models.ForeignKey(help_text='The account being debited or credited', on_delete=django.db.models.deletion.PROTECT, related_name='journal_lines', to='accounting.account')),
                ('journal_entry', models.ForeignKey(help_text='The journal entry this line belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='lines', to='accounting.journalentry')),
            ],
            options={
                'db_table': 'journal_entry_lines',
                'ordering': ['journal_entry', 'line_number'],
            },
        ),
        migrations.AddIndex(
            model_name='fund',
            index=models.Index(fields=['tenant', 'fund_type'], name='funds_tenant__04b66f_idx'),
        ),
        migrations.AddIndex(
            model_name='fund',
            index=models.Index(fields=['tenant', 'is_active'], name='funds_tenant__0ab0e8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='fund',
            unique_together={('tenant', 'fund_type')},
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['tenant', 'fund'], name='accounts_tenant__167cb2_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['tenant', 'account_type'], name='accounts_tenant__aa5cf2_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['account_number'], name='accounts_account_2815ed_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='account',
            unique_together={('tenant', 'fund', 'account_number')},
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['tenant', 'entry_date'], name='journal_ent_tenant__babea1_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['tenant', 'entry_number'], name='journal_ent_tenant__4ef660_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['entry_type'], name='journal_ent_entry_t_531805_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['reference_id'], name='journal_ent_referen_9d9766_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='journalentry',
            unique_together={('tenant', 'entry_number')},
        ),
        migrations.AddIndex(
            model_name='journalentryline',
            index=models.Index(fields=['journal_entry'], name='journal_ent_journal_d48be9_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentryline',
            index=models.Index(fields=['account'], name='journal_ent_account_d36604_idx'),
        ),
        migrations.AddConstraint(
            model_name='journalentryline',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('credit_amount', 0), ('debit_amount__gt', 0)), models.Q(('credit_amount__gt', 0), ('debit_amount', 0)), _connector='OR'), name='debit_or_credit_not_both'),
        ),
        migrations.AddConstraint(
            model_name='journalentryline',
            constraint=models.CheckConstraint(condition=models.Q(('debit_amount__gt', 0), ('credit_amount__gt', 0), _connector='OR'), name='amount_required'),
        ),
        migrations.AlterUniqueTogether(
            name='journalentryline',
            unique_together={('journal_entry', 'line_number')},
        ),
    ]
