# Generated by Django 5.1 on 2025-10-29 10:04

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounting', '0010_add_custom_reporting_models'),
        ('tenants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DelinquencyStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total outstanding balance', max_digits=15)),
                ('balance_0_30', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Balance 0-30 days old', max_digits=15)),
                ('balance_31_60', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Balance 31-60 days old', max_digits=15)),
                ('balance_61_90', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Balance 61-90 days old', max_digits=15)),
                ('balance_90_plus', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Balance 90+ days old', max_digits=15)),
                ('collection_stage', models.CharField(choices=[('CURRENT', 'Current'), ('0_30_DAYS', '0-30 Days'), ('31_60_DAYS', '31-60 Days'), ('61_90_DAYS', '61-90 Days'), ('90_PLUS_DAYS', '90+ Days'), ('ATTORNEY_REFERRAL', 'Attorney Referral'), ('LIEN_FILED', 'Lien Filed'), ('FORECLOSURE', 'Foreclosure')], default='CURRENT', max_length=30)),
                ('days_delinquent', models.IntegerField(default=0, help_text='Days since first delinquency', validators=[django.core.validators.MinValueValidator(0)])),
                ('last_payment_date', models.DateField(blank=True, help_text='Date of last payment received', null=True)),
                ('last_notice_date', models.DateField(blank=True, help_text='Date of last collection notice sent', null=True)),
                ('is_payment_plan', models.BooleanField(default=False, help_text='Owner is on approved payment plan')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about collection status')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delinquency_status', to='accounting.owner')),
            ],
            options={
                'verbose_name_plural': 'Delinquency statuses',
                'db_table': 'delinquency_status',
            },
        ),
        migrations.CreateModel(
            name='LateFeeRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Rule name (e.g., 'Standard Late Fee')", max_length=255)),
                ('grace_period_days', models.IntegerField(default=10, help_text='Days after due date before late fee applies', validators=[django.core.validators.MinValueValidator(0)])),
                ('fee_type', models.CharField(choices=[('FLAT', 'Flat Fee'), ('PERCENTAGE', 'Percentage of Balance'), ('BOTH', 'Flat + Percentage')], default='FLAT', max_length=20)),
                ('flat_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Flat late fee amount', max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('percentage_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Percentage of outstanding balance (e.g., 10.00 for 10%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum late fee amount (optional cap)', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_recurring', models.BooleanField(default=False, help_text='Apply late fee every month while delinquent')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rule is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='late_fee_rules', to='tenants.tenant')),
            ],
            options={
                'db_table': 'late_fee_rules',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('ATTORNEY_REFERRAL', 'Attorney Referral'), ('LIEN_FILED', 'Lien Filed'), ('FORECLOSURE', 'Foreclosure Initiated'), ('PAYMENT_PLAN', 'Payment Plan Approved'), ('WRITE_OFF', 'Bad Debt Write-Off')], max_length=30)),
                ('status', models.CharField(choices=[('PENDING_APPROVAL', 'Pending Board Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed')], default='PENDING_APPROVAL', max_length=30)),
                ('requested_date', models.DateField(help_text='Date action was requested')),
                ('approved_date', models.DateField(blank=True, help_text='Date approved by board', null=True)),
                ('approved_by', models.CharField(blank=True, help_text='Board member who approved', max_length=255)),
                ('completed_date', models.DateField(blank=True, help_text='Date action was completed', null=True)),
                ('balance_at_action', models.DecimalField(decimal_places=2, help_text='Outstanding balance when action was taken', max_digits=15)),
                ('attorney_name', models.CharField(blank=True, help_text='Attorney or firm handling case', max_length=255)),
                ('case_number', models.CharField(blank=True, help_text='Court case number (for liens/foreclosure)', max_length=100)),
                ('notes', models.TextField(blank=True, help_text='Details about this action')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_actions', to='accounting.owner')),
            ],
            options={
                'db_table': 'collection_actions',
                'ordering': ['-requested_date'],
                'indexes': [models.Index(fields=['owner', '-requested_date'], name='collection__owner_i_3f575a_idx'), models.Index(fields=['status'], name='collection__status_c7506a_idx')],
            },
        ),
        migrations.CreateModel(
            name='CollectionNotice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notice_type', models.CharField(choices=[('FIRST_NOTICE', 'First Notice'), ('SECOND_NOTICE', 'Second Notice'), ('FINAL_NOTICE', 'Final Notice'), ('PRE_LIEN', 'Pre-Lien Notice'), ('LIEN_FILED', 'Lien Filed Notice'), ('ATTORNEY_REFERRAL', 'Attorney Referral')], max_length=30)),
                ('delivery_method', models.CharField(choices=[('EMAIL', 'Email'), ('CERTIFIED_MAIL', 'Certified Mail'), ('REGULAR_MAIL', 'Regular Mail')], max_length=20)),
                ('sent_date', models.DateField(help_text='Date notice was sent')),
                ('balance_at_notice', models.DecimalField(decimal_places=2, help_text='Outstanding balance when notice was sent', max_digits=15)),
                ('tracking_number', models.CharField(blank=True, help_text='USPS tracking number for certified mail', max_length=100)),
                ('delivered_date', models.DateField(blank=True, help_text='Date notice was delivered (for certified mail)', null=True)),
                ('returned_undeliverable', models.BooleanField(default=False, help_text='Notice was returned as undeliverable')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this notice')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_notices', to='accounting.owner')),
            ],
            options={
                'db_table': 'collection_notices',
                'ordering': ['-sent_date'],
                'indexes': [models.Index(fields=['owner', '-sent_date'], name='collection__owner_i_dab51f_idx')],
            },
        ),
    ]
